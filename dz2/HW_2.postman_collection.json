{
	"info": {
		"_postman_id": "1dd2bb2f-1726-419b-9587-142f3795268a",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20852724"
	},
	"item": [
		{
			"name": "1-first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () { //SNIPPETS: Status code:Code is 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Проверить, что в body приходит правильный string.",
							"pm.test(\"Body matches string\", function () {//SNIPPETS: Response body: Contains string",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\"); //eql точное сравнение, include - совпадение",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_5005}}/first",
					"host": [
						"{{url_5005}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2-user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () { //SNIPPETS: Status code:Code is 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"let parsit_responseBody_name = jsonData.name;",
							"let parsit_responseBody_age = jsonData.age;",
							"let parsit_responseBody_salary = jsonData.salary;",
							"let parsit_responseBody_family = jsonData.family;",
							"let parsit_responseBody_salary_1_5 = jsonData.family.u_salary_1_5_year",
							"",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.) //SNIPPETS: Response body: Contains string",
							"pm.test(\"Correct name\", function () {",
							"    pm.expect(parsit_responseBody_name).to.eql(\"Oleksandr\");",
							"});",
							"",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Correct age\", function () {",
							"    pm.expect(parsit_responseBody_age).to.eql(\"33\");",
							"});",
							"",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Correct salary\", function () {",
							"    pm.expect(parsit_responseBody_salary).to.eql(3000);",
							"});",
							"",
							"",
							"// 7. Спарсить request.",
							"let req = request.data;",
							"",
							"let parsit_request_name = req.name;",
							"let parsit_request_age = req.age;",
							"let parsit_request_salary = req.salary;",
							"let parsit_request_salary_1_5 = req.salary * 4;",
							"",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Correct name_req\", function () {",
							"    pm.expect(parsit_request_name).to.eql(\"Oleksandr\");",
							"});",
							"",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Correct req_age\", function () {",
							"    pm.expect(parsit_request_age).to.eql(\"33\");",
							"});",
							"",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Correct req_salary\", function () {",
							"    pm.expect(parsit_request_salary).to.eql(\"3000\");",
							"});",
							"",
							"// 11. Вывести в консоль параметр family из response.",
							"console.log(\"response_family - \", parsit_responseBody_family)",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Salary_1_5\", function () {",
							"    pm.expect(parsit_request_salary_1_5).to.eql(parsit_responseBody_salary_1_5);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url_5005}}/user_info_3",
					"host": [
						"{{url_5005}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3-object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () { //SNIPPETS: Status code:Code is 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"let resp_name = jsonData.name;",
							"let resp_age = jsonData.age;",
							"let resp_salary = String(jsonData.salary);",
							"let resp_family = jsonData.family;",
							"let resp_dog = jsonData.family.pets.dog;",
							"let resp_name_dog = jsonData.family.pets.dog.name;",
							"let resp_age_dog = jsonData.family.pets.dog.age;",
							"",
							"// 4. Спарсить request.",
							"let req = pm.request.url.query.toObject();",
							"",
							"let req_name = req.name;",
							"let req_age = req.age;",
							"let req_salary = req.salary",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Name\", function () {",
							"    pm.expect(resp_name).to.eql(req_name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Age\", function () {",
							"    pm.expect(resp_age).to.eql(req_age);",
							"});",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Salary\", function () {",
							"    pm.expect(resp_salary).to.eql(req_salary);",
							"});",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(\"response_family - \", resp_family)",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Dog_name\", function () {",
							"    pm.expect(resp_dog).to.have.property(\"name\");",
							"});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog_age\", function () {",
							"    pm.expect(resp_dog).to.have.property(\"age\");",
							"});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Correct_Name\", function () {",
							"    pm.expect(resp_name_dog).to.eql(\"Luky\");",
							"});",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Correct_Age\", function () {",
							"    pm.expect(resp_age_dog).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_5005}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url_5005}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4-object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () { //SNIPPETS: Status code:Code is 200",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"let resp_name = jsonData.name;",
							"let resp_age = String(jsonData.age);",
							"let resp_salary = jsonData.salary",
							"",
							"// 4. Спарсить request.",
							"let req = pm.request.url.query.toObject();",
							"",
							"let req_name = req.name;",
							"let req_age = req.age;",
							"let req_salary = req.salary",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Name\", function () {",
							"    pm.expect(resp_name).to.eql(req_name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Age\", function () {",
							"    pm.expect(resp_age).to.eql(req_age);",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(\"Request_salary -\", req_salary)",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(\"Response_salary\", resp_salary)",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(\"Response_salary_0 -\", resp_salary[0])",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(\"Request_salary_1 -\", resp_salary[1])",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(\"Request_salary_2 -\", resp_salary[2])",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Equality_salary_1\", function () {",
							"    pm.expect(String(resp_salary[0])).to.eql(req_salary);",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Equality_salary_2\", function () {",
							"    pm.expect(resp_salary[1]).to.eql(String(req_salary*2));",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Equality_salary_3\", function () {",
							"    pm.expect(resp_salary[2]).to.eql(String(req_salary*3));",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", req.name);",
							"",
							"// 16. Создать в окружении переменную age",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", req.age);",
							"",
							"// 17. Создать в окружении переменную salary",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", req.salary);",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"resp_salary.forEach ((item) => {console.log(item)})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_5005}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url_5005}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}