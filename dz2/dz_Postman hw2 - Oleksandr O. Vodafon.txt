HW_2 Postman

I
http://162.55.220.72:5005/first
1. Отправить запрос.
Get > http://162.55.220.72:5005/first > Send
This is the first responce from server!

2. Статус код 200
pm.test("Status code is 200", function () { //SNIPPETS: Status code:Code is 200
    pm.response.to.have.status(200);
});

3. Проверить, что в body приходит правильный string.
pm.test("Body matches string", function () {//SNIPPETS: Response body: Contains string
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});



II
http://162.55.220.72:5005/user_info_3
Method: POST
EndPoint: /user_info_3
request form data: 
 name: str
 age: int
 salary: int

1. Отправить запрос.
Get > http://162.55.220.72:5005/user_info_3 > Send

2. Статус код 200
pm.test("Status code is 200", function () { //SNIPPETS: Status code:Code is 200
    pm.response.to.have.status(200);
});


3. Спарсить response body в json.
let jsonData = pm.response.json();
let parsit_name = jsonData.name;
let parsit_age = jsonData.age;
let parsit_salary = jsonData.salary;
let parsit_family = jsonData.family;
let parsit_salary_1_5 = jsonData.family.u_salary_1_5_year

4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Correct name", function () {
    pm.expect(parsit_name).to.eql("Oleksandr");
});

5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Correct age", function () {
    pm.expect(parsit_age).to.eql("33");
});

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Correct salary", function () {
    pm.expect(parsit_salary).to.eql(3000);
});

7. Спарсить request.
let req = request.data;

let req_name = req.name;
let req_age = req.age;
let req_salary = req.salary;
let req_salary_1_5 = req.salary * 4;


8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Correct name_req", function () {
    pm.expect(parsit_request_name).to.eql("Oleksandr");
});

9. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Correct req_age", function () {
    pm.expect(parsit_request_age).to.eql("33");
});

10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Correct req_salary", function () {
    pm.expect(parsit_request_salary).to.eql("3000");
});

11. Вывести в консоль параметр family из response.
console.log("response_family - ", parsit_responseBody_family)

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)




III
http://162.55.220.72:5005/object_info_3
Method: GET
EndPoint: /object_info_3
request url params: 
 name: str
 age: int
 salary: int

1. Отправить запрос.
Get > http://162.55.220.72:5005/user_info_3 > Send

2. Статус код 200

3. Спарсить response body в json.

4. Спарсить request.

5. Проверить, что name в ответе равно name s request (name забрать из request.)

6. Проверить, что age в ответе равно age s request (age забрать из request.)

7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

8. Вывести в консоль параметр family из response.

9. Проверить, что у параметра dog есть параметры name.

10. Проверить, что у параметра dog есть параметры age.

11. Проверить, что параметр name имеет значение Luky.

12. Проверить, что параметр age имеет значение 4.



IV
http://162.55.220.72:5005/object_info_4
Method: GET
EndPoint: /object_info_4
request url params: 
 name: str
 age: int
 salary: int

1. Отправить запрос.
Get > http://162.55.220.72:5005/object_info_4 > Send

2. Статус код 200

3. Спарсить response body в json.

4. Спарсить request.

5. Проверить, что name в ответе равно name s request (name забрать из request.)

6. Проверить, что age в ответе равно age из request (age забрать из request.)

7. Вывести в консоль параметр salary из request.

8. Вывести в консоль параметр salary из response.

9. Вывести в консоль 0-й элемент параметра salary из response.

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)

15. Создать в окружении переменную name

16. Создать в окружении переменную age

17. Создать в окружении переменную salary

18. Передать в окружение переменную name

19. Передать в окружение переменную age

20. Передать в окружение переменную salary

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.


ДЗ от Толи
Supermassive black hole, [Jun 27, 2022 at 11:15:36 PM]:
собственно домашка

Supermassive black hole, [17/05/2022 02:08]
Ну и небольшая домашка от меня:) ❤️

1. (ОБЯЗАТЕЛЬНОЕ И ВАЖНЕЙШЕЕ ЗАДАНИЕ) http://162.55.220.72:5005/user_info_2
Необходимо провести тестирование API данного эндпоинта на валидацию входных параметров. Суть задания: проверить валидации каждого поля, подаваемого в эндпоинт на возможные значения. Будем УСЛОВНО считать, что негативная проверка должна возвращать какой угодно статус НО НЕ 200! Ваша задача написать тест кейсы в постмане таким образом, что одна негативная проверка - один запрос, позитивные проверки можно объединять в 1. Ваша задача протестировать исходя из требований на все возможные аспекты. В каждом запросе тест ТОЛЬКО НА СТАТУС КОД (200 - позитивное значение, не 200 - негативное). 
P.S. ЗАДАНИЕ НЕ ПОДРАЗУМЕВАЕТ, ЧТО ЭНДПОИНТ РАБОТАЕТ СОГЛАСНО НАПИСАННЫМ ТРЕБОВАНИЯМ. МЫ УЧИМСЯ ПИСАТЬ ТЕСТЫ НА API!
Требования:
1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное
2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное
3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное

1****. Преобразовать задание 1 таким образом, чтобы вы отправляли параметры через CSV файл. У вас будет ровно 1 запрос в коллекции, который будет повторяться столько раз, сколько строк в CSV файле. Также должна быть написана функция в тестах, которая проверяет валидность входящих данных, и в зависимости от этого проверяет на статус 200 или НЕ 200.

2. http://162.55.220.72:5007/object_info_4
* Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary

3. http://162.55.220.72:5005/object_info_3
 Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)

4. http://162.55.220.72:5005/user_info_2
1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)
2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)
3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.